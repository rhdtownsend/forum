! Module  : system_m
! Purpose : operating system support
!
! Copyright 2021-2024 Rich Townsend
!
! This file is part of the ForUM (Fortran Utility Modules)
! package. ForUM is free software: you can redistribute it and/or
! modify it under the terms of the GNU General Public License as
! published by the Free Software Foundation, version 3.
!
! ForUM is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module system_m

   ! Uses

   use kinds_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Interfaces

   #:for suffix in ALL_SUFFIXES

      interface get_arg
         module procedure get_arg_${suffix}$_
         module procedure get_arg_name_${suffix}$_
      end interface get_arg

      interface get_env
         module procedure get_env_${suffix}$_
      end interface get_env

   #:endfor

   ! Access specifiers

   public :: n_arg
   public :: get_arg
   public :: get_env

   ! Default access

   private

contains

   function n_arg ()

      integer :: n_arg

      ! Get the number of arguments

      n_arg = COMMAND_ARGUMENT_COUNT()

      ! Finish

      return

   end function n_arg

   !****

   #:for type, suffix in zip(MATH_TYPES, MATH_SUFFIXES)

      subroutine get_arg_${suffix}$_(number, value, status)

         integer, intent(in)            :: number
         ${type}$, intent(out)          :: value
         integer, optional, intent(out) :: status

         integer                   :: length
         character(:), allocatable :: buffer

         ! Read the numbered command argument

         ! Determine the argument length

         call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status)
         if (PRESENT(status)) then
            if (status /= 0) return
         endif

         ! Read the argument into a character buffer

         allocate(character(length)::buffer)

         call GET_COMMAND_ARGUMENT(number, buffer, STATUS=status)
         if (PRESENT(status)) then
            if (status /= 0) return
         endif

         ! Extract the value from the buffer

         read(buffer, *) value

         ! Finish

         return

      end subroutine get_arg_${suffix}$_

      !****

      subroutine get_arg_name_${suffix}$_(name, value, status, first, last)

         character(*), intent(in)       :: name
         ${type}$, intent(out)          :: value
         integer, intent(out), optional :: status
         integer, intent(in), optional  :: first
         integer, intent(in), optional  :: last

         integer                   :: first_
         integer                   :: last_
         integer                   :: number
         integer                   :: length
         character(:), allocatable :: buffer
         integer                   :: i

         if (PRESENT(first)) then
            first_ = MAX(first, 1)
         else
            first_ = 1
         endif

         if (PRESENT(last)) then
            last_ = MIN(last, n_arg())
         else
            last_ = n_arg()
         endif

         ! Read the named command argument

         if (first_ >= last_) then

            ! Loop over arguments

            arg_loop : do number = first_, last_

               ! Determine the argument length

               call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status)
               if (PRESENT(status)) then
                  if (status /= 0) return
               endif

               ! Read the argument into a character buffer

               allocate(character(length)::buffer)

               call GET_COMMAND_ARGUMENT(number, buffer, STATUS=status)
               if (PRESENT(status)) then
                  if (status /= 0) return
               endif

               ! Check if the name matches

               i = INDEX(buffer, '=')

               if (i > 1) then

                  if (buffer(:i-1) == name) then

                     ! If a match is found, read the value and return

                     read(buffer(i+1:), *) value
                     if (PRESENT(status)) status = 0

                     return

                  end if

               endif

               deallocate(buffer)

            end do arg_loop

         end if

         ! If we reach this point, set status to -2 to indicate not found

         if (PRESENT(status)) status = -2

         ! Finish

         return

      end subroutine get_arg_name_${suffix}$_

   #:endfor

   !****

   #:for type, suffix in zip(CHAR_TYPES, CHAR_SUFFIXES)

      #:set def_type = type.replace('*', ':')

      subroutine get_arg_${suffix}$_(number, value, status)

         integer, intent(in)                    :: number
         ${def_type}$, allocatable, intent(out) :: value
         integer, optional, intent(out)         :: status

         integer :: length
         integer :: status_

         ! Read the numbered command argument

         ! Determine the argument length

         call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status_)

         if (PRESENT(status)) then
            status = status_
            if (status_ /= 0) return
         else
            @:ASSERT(status_ == 0, 'error when reading command argument')
         endif

         ! Read the argument

         if (length > 0) then
            allocate(character(length)::value)
            call GET_COMMAND_ARGUMENT(number, value)
         endif

         ! Finish

         return

      end subroutine get_arg_${suffix}$_

      !****

      subroutine get_arg_name_${suffix}$_(name, value, status, first, last)

         character(*), intent(in)               :: name
         ${def_type}$, allocatable, intent(out) :: value
         integer, intent(out), optional         :: status
         integer, intent(in), optional          :: first
         integer, intent(in), optional          :: last

         integer                   :: first_
         integer                   :: last_
         integer                   :: number
         integer                   :: length
         character(:), allocatable :: buffer
         integer                   :: i

         if (PRESENT(first)) then
            first_ = MAX(first, 1)
         else
            first_ = 1
         endif

         if (PRESENT(last)) then
            last_ = MIN(last, n_arg())
         else
            last_ = n_arg()
         endif

         ! Read the named command argument

         if (first_ >= last_) then

            ! Loop over arguments

            arg_loop : do number = first_, last_

               ! Determine the argument length

               call GET_COMMAND_ARGUMENT(number, LENGTH=length, STATUS=status)
               if (PRESENT(status)) then
                  if (status /= 0) return
               endif

               ! Read the argument into a character buffer

               allocate(character(length)::buffer)

               call GET_COMMAND_ARGUMENT(number, buffer, STATUS=status)
               if (PRESENT(status)) then
                  if (status /= 0) return
               endif

               ! Check if the name matches

               i = INDEX(buffer, '=')

               if (i > 1) then

                  if (buffer(:i-1) == name) then

                     ! If a match is found, read the value and return

                     value = buffer(i+1:)
                     if (PRESENT(status)) status = 0

                     return

                  end if

               endif

               deallocate(buffer)

            end do arg_loop

         end if

         ! If we reach this point, set status to -2 to indicate not found

         if (PRESENT(status)) status = -2

         ! Finish

         return

      end subroutine get_arg_name_${suffix}$_

   #:endfor

   !****

   #:for type, suffix in zip(MATH_TYPES,MATH_SUFFIXES)

      subroutine get_env_${suffix}$_(name, value, status)

         character(*), intent(in)       :: name
         ${type}$, intent(out)          :: value
         integer, optional, intent(out) :: status

         integer                   :: length
         integer                   :: status_
         character(:), allocatable :: buffer

         ! Read the named environment variable

         ! Determine the variable length

         call GET_ENVIRONMENT_VARIABLE(name, LENGTH=length, STATUS=status_)

         if (PRESENT(status)) then
            status = status_
            if (status_ /= 0) return
         else
            @:ASSERT(status_ == 0, 'error when reading environment variable '//name)
         endif

         ! Read the variable into a character buffer

         allocate(character(length)::buffer)

         call GET_ENVIRONMENT_VARIABLE(name, buffer)

         ! Extract the value from the buffer

         read(buffer, *) value

         ! Finish

         return

      end subroutine get_env_${suffix}$_

   #:endfor

   !****

   #:for type, suffix in zip(CHAR_TYPES, CHAR_SUFFIXES)

      #:set def_type = type.replace('*', ':')

      subroutine get_env_${suffix}$_(name, value, status)

         character(*), intent(in)               :: name
         ${def_type}$, allocatable, intent(out) :: value
         integer, optional, intent(out)         :: status

         integer :: length
         integer :: status_

         ! Read the named environment variable

         ! Determine the variable length

         call GET_ENVIRONMENT_VARIABLE(name, LENGTH=length, STATUS=status_)

         if (PRESENT(status)) then
            status = status_
            if (status_ /= 0) return
         else
            @:ASSERT(status_ == 0, 'error when reading environment variable '//name)
         endif

         ! Read the variable

         if (length > 0) then
            allocate(character(length)::value)
            call GET_ENVIRONMENT_VARIABLE(name, value)
         endif

         ! Finish

         return

      end subroutine get_env_${suffix}$_

   #:endfor

end module system_m
