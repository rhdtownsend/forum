#:include 'forum.inc'

module test_order_m

   ! Uses

   use forum_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Access specifiers

   private

   public :: test

contains

   subroutine test ()

      call test_locate_()

   end subroutine test

   !****

   subroutine test_locate_()

      real(RD), allocatable :: x(:)
      real(RD)              :: x_loc
      integer               :: i_loc
      integer               :: i_loc_chk
      logical               :: right

      integer :: i

      ! Iterate over test instances

      print *,'locate (left)'

      do i = 1, 6
         call locate_arrange_l_(i)
         call locate_act_(i)
         call locate_assert_(i)
      end do

      print *,'locate (right)'

      do i = 1, 6
         call locate_arrange_r_(i)
         call locate_act_(i)
         call locate_assert_(i)
      end do

      ! Finish

      return

   contains

      subroutine locate_arrange_l_(i)

         integer, intent(in) :: i

         integer :: k

         x = [(k,k=1,10)]

         right = .FALSE.

         select case (i)
         case (1)
            x_loc = 6._RD
            i_loc_chk = 6
         case (2)
            x_loc = 4.5_RD
            i_loc_chk = 4
         case (3)
            x_loc = 1._RD
            i_loc_chk = 1
         case (4)
            x_loc = 10._RD
            i_loc_chk = 10
         case (5)
            x_loc = 0.99_RD
            i_loc_chk = 0
         case (6)
            x_loc = 10.01_RD
            i_loc_chk = 11
         case default
            @:ABORT('invalid instance')
         end select

         ! Finish

         return

      end subroutine locate_arrange_l_

      !****

      subroutine locate_arrange_r_(i)

         integer, intent(in) :: i

         integer :: k

         right = .TRUE.

         x = [(k,k=1,10)]

         select case (i)
         case (1)
            x_loc = 6._RD
            i_loc_chk = 6
         case (2)
            x_loc = 4.5_RD
            i_loc_chk = 5
         case (3)
            x_loc = 1._RD
            i_loc_chk = 1
         case (4)
            x_loc = 10._RD
            i_loc_chk = 10
         case (5)
            x_loc = 0.99_RD
            i_loc_chk = 0
         case (6)
            x_loc = 10.01_RD
            i_loc_chk = 11
         case default
            @:ABORT('invalid instance')
         end select

         ! Finish

         return

      end subroutine locate_arrange_r_

      !****

      subroutine locate_act_(i)

         integer, intent(in) :: i

         call locate(x, x_loc, i_loc, right=right)

         ! Finish

         return

      end subroutine locate_act_

      !****

      subroutine locate_assert_(i)

         integer, intent(in) :: i

         if (i_loc == i_loc_chk) then
            print *, '  PASS', i
         else
            print *, '  FAIL', i, i_loc, i_loc_chk
         end if

         ! Finish

         return

      end subroutine locate_assert_

   end subroutine test_locate_

end module test_order_m
